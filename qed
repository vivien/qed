#!/bin/sh

# This file is part of the qed project (https://github.com/vivien/qed).
#
# Copyright (c) 2016-2017 Vivien Didelot
# Copyright (c) 2016-2017 Lionel Nicolas
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# exit on failure
set -e

# exit on unassigned variable
set -u

# define colors
RESTORE='\033[0m'
RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
BLUE='\033[01;34m'

# define logging fumctions
logme() {
	if ! ${quiet}; then
		printf "${GREEN}qed: $*${RESTORE}\n"
	fi
}

fatal() {
	printf "\n${RED}qed: $*${RESTORE}\n\n" >&2
	exit 1
}

# define usage
usage() {
	echo "usage: $0 [-h] [-d DISTRIBUTION] [-i] [-l] [-r] [-b] [-p] [CMD ARGS]"
	echo
	echo "	-h	show this help message"
	echo "	-c	local configuration directory (default to autodetect)"
	echo "	-d	target distribution image (a custom one can be used, like 'my.registry/builder/ubuntu:10.04')"
	echo "	-i	enter interactive mode"
	echo "	-b	force re-build of a local docker base image"
	echo "	-p	force pull of docker base image from registry"
	echo "	-f	force re-creation of the docker container"
	echo "	-w	enable moonwalk mode (usefull when running qed commands in subdirectories)"
	echo "	-r	remove all containers associated to current working directory"
	echo "	-q	quiet mode (do not show qed log messages)"
}

list() {
	echo "listing containers"
	# TODO
}

remove() {
	echo "removing containers"
	# TODO
}

# prepare docker image
docker_prepare() {
	# force pull if docker image is not found (and 'build' is not requested)
	if ! ${pull} && ! ${rebuild}; then
		if [ -z "$(docker images -q qed-${hash}-${project}-${distribution_sanitized})" ]; then
			pull=true
		fi
	fi

	# (re)build docker image
	if ${rebuild}; then
		if [ -f "${local_config_dir}/Dockerfile.${distribution}" ]; then
			docker build \
				--tag qed-${hash}-${project}-${distribution_sanitized} \
				--file ${local_config_dir}/Dockerfile.${distribution} \
				${docker_build_args:-} \
				${local_config_dir}/

		else
			fatal "no Dockerfile corresponding to ${distribution} found in ${local_config_dir}/ directory"
		fi

	# only pull distribution image to use it directly (without any changes)
	elif ${pull}; then
		docker pull ${distribution}
		docker tag ${distribution} qed-${hash}-${project}-${distribution_sanitized}
	fi

	# if build or pull is requested, force running container to be flushed
	if ${pull} || ${rebuild}; then
		flush=true
	fi
}

# run (or start) docker container
docker_run() {
	# flush and recreate docker container (if any)
	docker rm -f qed-${hash}-${project}-${distribution_sanitized} >/dev/null 2>&1 || true

	# prepare SSH agent mapping if any
	if [ -n "${SSH_AUTH_SOCK:-}" ]; then
		ssh_args="--volume ${SSH_AUTH_SOCK}:/tmp/ssh-agent:ro --volume ${HOME}/.ssh:${HOME}/.ssh:ro --env SSH_AUTH_SOCK=/tmp/ssh-agent"
	fi

	logme "starting new container based on ${distribution} (docker image is qed-${hash}-${project}-${distribution_sanitized})"
	docker run \
		--detach \
		--name qed-${hash}-${project}-${distribution_sanitized} \
		--hostname qed-${hash}-${project}-${distribution_sanitized} \
		--env TERM=xterm \
		--volume ${PWD}:${PWD} \
		--workdir ${PWD} \
		${ssh_args:-} \
		--user ${uid}:${gid} \
		qed-${hash}-${project}-${distribution_sanitized} \
		sleep INFINITY >/dev/null

	# create uid and gid in the container if their are not present
	# this will also make them fit with the current user/group names
	if ! docker exec qed-${hash}-${project}-${distribution_sanitized} id -g ${gid} >/dev/null 2>&1; then
		docker exec --user root qed-${hash}-${project}-${distribution_sanitized} groupadd --gid ${gid} "$(id -gn)" >/dev/null
	fi

	if ! docker exec qed-${hash}-${project}-${distribution_sanitized} id -u ${uid} >/dev/null 2>&1; then
		docker exec --user root qed-${hash}-${project}-${distribution_sanitized} useradd --uid ${uid} --gid ${gid} "$(id -un)" >/dev/null
	fi
}

# execute command inside docker container
docker_exec() {
	if [ -z "$*" ]; then
		fatal "no command to execute supplied"
	fi

	if ${flush}; then
		# flush is required, so recreate the container
		docker_run

	elif [ -z "$(docker ps -aq --filter=name=qed-${hash}-${project}-${distribution_sanitized})" ]; then
		# no container exists, so create one
		docker_run

	else
		# container already exists, so make sure that it's running
		docker start qed-${hash}-${project}-${distribution_sanitized} >/dev/null
	fi

	logme "running command '$*' on ${distribution}"

	exec docker exec \
		${interactive} \
		qed-${hash}-${project}-${distribution_sanitized} \
		"$@"
}

# try to find an existing container related to our parents directories
qed_get_local_config_dir() {
	# local config directory has already been set via CLI, return it
	if [ -n "${local_config_dir:-}" ]; then
		echo ${local_config_dir}
		return
	fi

	# moonwalk is not enabled, current directory is considered as qed base directory
	if ! ${moonwalk}; then
		echo ${curdir}/.qed
		return
	fi

	# try to find an existing container related to our parents directories
	tmpdir=${curdir}
	while [ "${tmpdir}" != "/" ]; do
		tmphash=$(echo ${tmpdir} | sha1sum | cut -c 1-8)

		# if we have a match, consider directory as qed base directory
		if docker ps -a --format '{{ .Names }}' | grep -q ^qed-${tmphash}-; then
			echo ${tmpdir}/.qed
			return
		fi

		tmpdir=$(dirname ${tmpdir})
	done

	# try to find a .qed directory in one of our parents directories
	tmpdir=${curdir}
	while [ "${tmpdir}" != "/" ]; do
		# if we have a match, consider directory as qed base directory
		if [ -d "${tmpdir}/.qed" ]; then
			echo ${tmpdir}/.qed
			return
		fi

		tmpdir=$(dirname ${tmpdir})
	done

	# we do not have any matches, current directory is considered as qed base directory
	echo ${curdir}/.qed
}

# default values (some of them can be set in configuration files)
global_config_dir=${XDG_CONFIG_HOME:-${HOME}/.config}/qed
local_config_dir=
distribution=
curdir=${PWD}
uid=$(id -u)
gid=$(id -g)
interactive=
rebuild=false
moonwalk=false
pull=false
list=false
remove=false
action=run
flush=false
quiet=false

# source global config file if found
if [ -f ${global_config_dir}/config ]; then
	. ${global_config_dir}/config
fi

# parse parameters
while getopts "hc:d:ilrbpwfq" opt; do
	case $opt in
		h) usage; exit 0 ;;
		c) local_config_dir="${OPTARG}" ;;
		d) distribution="${OPTARG}" ;;
		i) interactive="--interactive --tty" ;;
		b) rebuild=true ;;
		p) pull=true ;;
		f) flush=true ;;
		w) moonwalk=true ;;
		l) action=list ;;
		r) action=remove ;;
		q) quiet=true ;;
		*) usage; exit 1 ;;
	esac
done

# detect local config directory
local_config_dir=$(qed_get_local_config_dir)

# source local config file if found
if [ -f ${local_config_dir}/config ]; then
	. ${local_config_dir}/config
fi

# dynamic variables
project_dir=$(dirname ${local_config_dir})
project=$(basename ${project_dir})
hash=$(echo ${project_dir} | sha1sum | cut -c 1-8)

# skip all qed parameters
shift "$((OPTIND-1))"

# check distribution parameter
if [ -z "${distribution}" ]; then
	fatal "distribution is not set"
fi

# sanitize distribution name
distribution_sanitized=$(echo ${distribution} | sed 's/:/-/g' | sed 's/\./-/g' | rev | cut -d/ -f1 | rev)

# check action
case ${action} in
	list|remove)
		${action}
		;;

	run)
		# run a shell if command is left empty and interactive mode is set
		if [ -z "$*" ] && [ -n "${interactive}" ]; then
			set -- ${SHELL:-/bin/sh}
		fi
		docker_prepare
		docker_exec "$@"
		;;

	*)
		fatal "unsupported action ${action}" ;;
esac
